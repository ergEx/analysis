# Model selection selecting between three different models
# EUT model: eta_i_add = eta_i_mul
# EE model: eta_i_add = 0, eta_i_mul = 1

model{

##LIKELIHOOD
for (c in 1:nConditions){
for (i in 1:nSubjects){
oneminEta_EUT[i,c] = 1 - eta_i_EUT[i]                                                  #1 minus eta term in EUT
oneminEta_EE[i,c] = 1 - eta_i_EE[i,c]                                                #1 minus eta term in EE
for (t in 1:nTrials){
    #CALCULATE WEALTH UPDATES
    wLU[i,c,t]    = w[i,c,t] + dwLU[i,c,t]                                           #wealth if outcome Left Upper
    wLL[i,c,t]    = w[i,c,t] + dwLL[i,c,t]                                           #wealth if outcome Left Lower
    wRU[i,c,t]    = w[i,c,t] + dwRU[i,c,t]                                           #wealth if outcome Right Upper
    wRL[i,c,t]    = w[i,c,t] + dwRL[i,c,t]                                           #wealth if outcome Right Lower
    wLUp[i,c,t]   = ifelse(wLU[i,c,t] > 0, wLU[i,c,t], 1)                            #replacing if negative (doesn't matter cause choice is deleted in input)
    wLLp[i,c,t]   = ifelse(wLL[i,c,t] > 0, wLL[i,c,t], 1)                            #replacing if negative (doesn't matter cause choice is deleted in input)
    wRUp[i,c,t]   = ifelse(wRU[i,c,t] > 0, wRU[i,c,t], 1)                            #replacing if negative (doesn't matter cause choice is deleted in input)
    wRLp[i,c,t]   = ifelse(wRL[i,c,t] > 0, wRL[i,c,t], 1)                            #replacing if negative (doesn't matter cause choice is deleted in input)
    wp[i,c,t]     = ifelse(w[i,c,t] > 0, w[i,c,t], 1)                                #replacing if negative (doesn't matter cause choice is deleted in input)

    #EUT
    u_EUT[i,c,t]      = (pow(wp[i,c,t],oneminEta_EUT[i,c]) - 1) / oneminEta_EUT[i,c]    #utility of wealth prior to trial
    uLU_EUT[i,c,t]    = (pow(wLUp[i,c,t],oneminEta_EUT[i,c]) - 1) / oneminEta_EUT[i,c]  #transforms wealth into utility
    uLL_EUT[i,c,t]    = (pow(wLLp[i,c,t],oneminEta_EUT[i,c]) - 1) / oneminEta_EUT[i,c]  #transforms wealth into utility
    uRU_EUT[i,c,t]    = (pow(wRUp[i,c,t],oneminEta_EUT[i,c]) - 1) / oneminEta_EUT[i,c]  #transforms wealth into utility
    uRL_EUT[i,c,t]    = (pow(wRLp[i,c,t],oneminEta_EUT[i,c]) - 1) / oneminEta_EUT[i,c]  #transforms wealth into utility
    duLU_EUT[i,c,t]   = uLU_EUT[i,c,t] - u_EUT[i,c,t]                                   #delta utility of wealth outcome Left Upper
    duLL_EUT[i,c,t]   = uLL_EUT[i,c,t] - u_EUT[i,c,t]                                   #delta utility of wealth outcome Left Lower
    duRU_EUT[i,c,t]   = uRU_EUT[i,c,t] - u_EUT[i,c,t]                                   #delta utility of wealth outcome Right Upper
    duRL_EUT[i,c,t]   = uRL_EUT[i,c,t] - u_EUT[i,c,t]                                   #delta utility of wealth outcome right Lower
    eduL_EUT[i,c,t]   = (duLU_EUT[i,c,t] + duLL_EUT[i,c,t]) / 2                         #expected change in utility for Left gamble
    eduR_EUT[i,c,t]   = (duRU_EUT[i,c,t] + duRL_EUT[i,c,t]) / 2                         #expected change in utility for Right gamble
    deu_EUT[i,c,t]    = eduL_EUT[i,c,t] - eduR_EUT[i,c,t]                               #computes difference in expected change in utility
    sdeu_EUT[i,c,t]   = -1 * beta_i_EUT[i,c] * deu_EUT[i,c,t]                           #scaled by sensitivity parameter
    cp_EUT[i,c,t]     = 1 / (1 + (exp(sdeu_EUT[i,c,t])))                               #choice probability
    theta[i,c,t,1]     = max(0.000001,min(0.999999,cp_EUT[i,c,t]))                    # ensure 0 < cp < 1
    theta[i,c,t,3]     = max(0.000001,min(0.999999,cp_EUT[i,c,t]))                    # ensure 0 < cp < 1
    theta[i,c,t,5]     = max(0.000001,min(0.999999,cp_EUT[i,c,t]))                    # ensure 0 < cp < 1
    theta[i,c,t,7]    = max(0.000001,min(0.999999,cp_EUT[i,c,t]))                    # ensure 0 < cp < 1, accomodates parameter expansion for z

    #EE
    u_EE[i,c,t]      = (pow(wp[i,c,t],oneminEta_EE[i,c]) - 1) / oneminEta_EE[i,c]    #utility of wealth prior to trial
    uLU_EE[i,c,t]    = (pow(wLUp[i,c,t],oneminEta_EE[i,c]) - 1) / oneminEta_EE[i,c]  #transforms wealth into utility
    uLL_EE[i,c,t]    = (pow(wLLp[i,c,t],oneminEta_EE[i,c]) - 1) / oneminEta_EE[i,c]  #transforms wealth into utility
    uRU_EE[i,c,t]    = (pow(wRUp[i,c,t],oneminEta_EE[i,c]) - 1) / oneminEta_EE[i,c]  #transforms wealth into utility
    uRL_EE[i,c,t]    = (pow(wRLp[i,c,t],oneminEta_EE[i,c]) - 1) / oneminEta_EE[i,c]  #transforms wealth into utility
    duLU_EE[i,c,t]   = uLU_EE[i,c,t] - u_EE[i,c,t]                                   #delta utility of wealth outcome Left Upper
    duLL_EE[i,c,t]   = uLL_EE[i,c,t] - u_EE[i,c,t]                                   #delta utility of wealth outcome Left Lower
    duRU_EE[i,c,t]   = uRU_EE[i,c,t] - u_EE[i,c,t]                                   #delta utility of wealth outcome Right Upper
    duRL_EE[i,c,t]   = uRL_EE[i,c,t] - u_EE[i,c,t]                                   #delta utility of wealth outcome right Lower
    eduL_EE[i,c,t]   = (duLU_EE[i,c,t] + duLL_EE[i,c,t]) / 2                         #expected change in utility for Left gamble
    eduR_EE[i,c,t]   = (duRU_EUT[i,c,t] + duRL_EE[i,c,t]) / 2                         #expected change in utility for Right gamble
    deu_EE[i,c,t]    = eduL_EE[i,c,t] - eduR_EE[i,c,t]                               #computes difference in expected change in utility
    sdeu_EE[i,c,t]   = -1 * beta_i_EE[i,c] * deu_EE[i,c,t]                           #scaled by sensitivity parameter
    cp_EE[i,c,t]     = 1 / (1 + (exp(sdeu_EE[i,c,t])))                               #choice probability
    theta[i,c,t,2]     = max(0.000001,min(0.999999,cp_EE[i,c,t]))                    #ensure 0 < cp < 1
    theta[i,c,t,4]     = max(0.000001,min(0.999999,cp_EE[i,c,t]))                    #ensure 0 < cp < 1
    theta[i,c,t,6]     = max(0.000001,min(0.999999,cp_EE[i,c,t]))                    #ensure 0 < cp < 1
    theta[i,c,t,8]    = max(0.000001,min(0.999999,cp_EE[i,c,t]))                    #ensure 0 < cp < 1, accomodates parameter expansion for z

    #choice
    y[i,c,t]           ~ dbern(theta[i,c,t,z[i]])

}# end of trials
}# end of conditions
}# end of subjects


## PRIORS
#model indicator
#the model indicator variable z can take on any value from 1:n, and is subject to two stochastic processes, to prevent getting stuck
#the n values map onto just 3 models, and is simply a means of obtaining parameter expansion for the model indication
for (i in 1:nSubjects){
    px_z1[i]    ~ dcat(pz[])                                                          #parameter expansion variable for z, takes on integers 1:n with equal probability
    px_z2[i]    ~ dcat(pz[])                                                          #parameter expansion variable for z, takes on integers 1:n with equal probability
    delta_z1[i] = px_z2[i]-1                                                          #parameter expansion variable for z, takes on integers 0:n-1 with equal probability
    sum_z[i]    = px_z1[i]+delta_z1[i]                                                #sum takes on integers 1:2*n -1 with equal probability
    z[i]        = (sum_z[i] - (8 * trunc(sum_z[i]/8))) + 1                          #modulo n, adding 1 to return to values 1 to 8
}

#submodels
for (i in 1:nSubjects){
    eta_i_EUT[i]   ~ dnorm(mu_eta_EUT,tau_eta_EUT)

for (c in 1:nConditions){
    eta_i_EE[i,c] ~ dnorm(mu_eta_EE[c],tau_eta_EE[c])

    log_beta_i_EUT[i,c]  ~ dnorm(mu_log_beta_EUT[c], tau_log_beta_EUT[c])
    beta_i_EUT[i,c]      = exp(log_beta_i_EUT[i,c])

    log_beta_i_EE[i,c]  ~ dnorm(mu_log_beta_EE[c], tau_log_beta_EE[c])
    beta_i_EE[i,c]      = exp(log_beta_i_EE[i,c])

}#end of subjects
}#end of conditions


##HYPERPRIORS
for (c in 1:nConditions){
    #EUT
    mu_log_beta_EUT[c]       ~ dunif(-2.3,3.4)
    sigma_log_beta_EUT[c]    ~ dunif(0.01,1.6)
    tau_log_beta_EUT[c]      = pow(sigma_log_beta_EUT[c],-2)

    #EE
    mu_log_beta_EE[c]       ~ dunif(-2.3,3.4)
    sigma_log_beta_EE[c]    ~ dunif(0.01,1.6)
    tau_log_beta_EE[c]      = pow(sigma_log_beta_EE[c],-2)

}#end of conditions

#EUT
mu_eta_EUT    ~ dunif(-5,5)
sigma_eta_EUT ~ dunif(0.01,1.6)
tau_eta_EUT   = pow(sigma_eta_EUT,-2)

#EE
mu_eta_EE[1] = 0.0000
mu_eta_EE[2] = 0.9999
sigma_eta_EE         ~ dunif(0.01,1.6)
tau_eta_EE           = pow(sigma_eta_EE,-2)

}