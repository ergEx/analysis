# Fit condition specific params for isoelastic model for each subject using partial pooling of information

model{

##LIKELIHOOD
for (c in 1:nConditions){
for (i in 1:nSubjects){
oneminEta_1[i,c] = 1 - eta_i_1[i,c]
oneminEta_2[i,c] = 1 - eta_i_2[i,c]
oneminEta_3[i,c] = 1 - eta_g_3[c]

for (t in 1:nTrials){
    wLU[i,c,t]    = w[i,c,t] + dwLU[i,c,t]
    wLL[i,c,t]    = w[i,c,t] + dwLL[i,c,t]
    wRU[i,c,t]    = w[i,c,t] + dwRU[i,c,t]
    wRL[i,c,t]    = w[i,c,t] + dwRL[i,c,t]

    #No pooling (1)
    u_1[i,c,t]      = (pow(w[i,c,t],oneminEta_1[i,c]) - 1) / oneminEta_1[i,c]
    uLU_1[i,c,t]    = (pow(wLU[i,c,t],oneminEta_1[i,c]) - 1) / oneminEta_1[i,c]
    uLL_1[i,c,t]    = (pow(wLL[i,c,t],oneminEta_1[i,c]) - 1) / oneminEta_1[i,c]
    uRU_1[i,c,t]    = (pow(wRU[i,c,t],oneminEta_1[i,c]) - 1) / oneminEta_1[i,c]
    uRL_1[i,c,t]    = (pow(wRL[i,c,t],oneminEta_1[i,c]) - 1) / oneminEta_1[i,c]
    duLU_1[i,c,t]   = uLU_1[i,c,t] - u_1[i,c,t]
    duLL_1[i,c,t]   = uLL_1[i,c,t] - u_1[i,c,t]
    duRU_1[i,c,t]   = uRU_1[i,c,t] - u_1[i,c,t]
    duRL_1[i,c,t]   = uRL_1[i,c,t] - u_1[i,c,t]
    eduL_1[i,c,t]   = (duLU_1[i,c,t] + duLL_1[i,c,t]) / 2
    eduR_1[i,c,t]   = (duRU_1[i,c,t] + duRL_1[i,c,t]) / 2
    deu_1[i,c,t]    = eduL_1[i,c,t] - eduR_1[i,c,t]
    sdeu_1[i,c,t]   = -1 * beta_i_1[i,c] * deu_1[i,c,t]
    cp_1[i,c,t]     = 1 / (1 + (exp(sdeu_1[i,c,t])))
    theta[i,c,t,1]     = max(0.000001,min(0.999999,cp_1[i,c,t]))
    theta[i,c,t,4]     = max(0.000001,min(0.999999,cp_1[i,c,t]))

    #Partial pooling (2)
    u_2[i,c,t]      = (pow(w[i,c,t],oneminEta_2[i,c]) - 1) / oneminEta_2[i,c]
    uLU_2[i,c,t]    = (pow(wLU[i,c,t],oneminEta_2[i,c]) - 1) / oneminEta_2[i,c]
    uLL_2[i,c,t]    = (pow(wLL[i,c,t],oneminEta_2[i,c]) - 1) / oneminEta_2[i,c]
    uRU_2[i,c,t]    = (pow(wRU[i,c,t],oneminEta_2[i,c]) - 1) / oneminEta_2[i,c]
    uRL_2[i,c,t]    = (pow(wRL[i,c,t],oneminEta_2[i,c]) - 1) / oneminEta_2[i,c]
    duLU_2[i,c,t]   = uLU_2[i,c,t] - u_2[i,c,t]
    duLL_2[i,c,t]   = uLL_2[i,c,t] - u_2[i,c,t]
    duRU_2[i,c,t]   = uRU_2[i,c,t] - u_2[i,c,t]
    duRL_2[i,c,t]   = uRL_2[i,c,t] - u_2[i,c,t]
    eduL_2[i,c,t]   = (duLU_2[i,c,t] + duLL_2[i,c,t]) / 2
    eduR_2[i,c,t]   = (duRU_2[i,c,t] + duRL_2[i,c,t]) / 2
    deu_2[i,c,t]    = eduL_2[i,c,t] - eduR_2[i,c,t]
    sdeu_2[i,c,t]   = -1 * beta_i_2[i,c] * deu_2[i,c,t]
    cp_2[i,c,t]     = 1 / (1 + (exp(sdeu_2[i,c,t])))
    theta[i,c,t,2]     = max(0.000001,min(0.999999,cp_2[i,c,t]))
    theta[i,c,t,5]     = max(0.000001,min(0.999999,cp_2[i,c,t]))

    #Full pooling (3)
    u_3[i,c,t]      = (pow(w[i,c,t],oneminEta_3[i,c]) - 1) / oneminEta_3[i,c]
    uLU_3[i,c,t]    = (pow(wLU[i,c,t],oneminEta_3[i,c]) - 1) / oneminEta_3[i,c]
    uLL_3[i,c,t]    = (pow(wLL[i,c,t],oneminEta_3[i,c]) - 1) / oneminEta_3[i,c]
    uRU_3[i,c,t]    = (pow(wRU[i,c,t],oneminEta_3[i,c]) - 1) / oneminEta_3[i,c]
    uRL_3[i,c,t]    = (pow(wRL[i,c,t],oneminEta_3[i,c]) - 1) / oneminEta_3[i,c]
    duLU_3[i,c,t]   = uLU_3[i,c,t] - u_3[i,c,t]
    duLL_3[i,c,t]   = uLL_3[i,c,t] - u_3[i,c,t]
    duRU_3[i,c,t]   = uRU_3[i,c,t] - u_3[i,c,t]
    duRL_3[i,c,t]   = uRL_3[i,c,t] - u_3[i,c,t]
    eduL_3[i,c,t]   = (duLU_3[i,c,t] + duLL_3[i,c,t]) / 2
    eduR_3[i,c,t]   = (duRU_3[i,c,t] + duRL_3[i,c,t]) / 2
    deu_3[i,c,t]    = eduL_3[i,c,t] - eduR_3[i,c,t]
    sdeu_3[i,c,t]   = -1 * beta_i_3[i,c] * deu_3[i,c,t]
    cp_3[i,c,t]     = 1 / (1 + (exp(sdeu_3[i,c,t])))
    theta[i,c,t,3]     = max(0.000001,min(0.999999,cp_3[i,c,t]))
    theta[i,c,t,6]     = max(0.000001,min(0.999999,cp_3[i,c,t]))

    #choice
    y[i,c,t]           ~ dbern(theta[i,c,t,z[i]])

}# end of trials
}# end of conditions
}# end of subjects


## PRIORS
#model indicator
for (i in 1:nSubjects){
    z[i] ~ dcat(pz[])
}

#submodels
for (c in 1:nConditions){
eta_g_1[c]       ~ dnorm(0,1)  #not used
log_beta_g_1[c]  ~ dnorm(0, 1) #not used
beta_g_1[c]      = exp(0)      #not used

eta_g_2[c]       ~ dnorm(mu_eta_2[c],tau_eta_2[c])
log_beta_g_2[c]  ~ dnorm(mu_log_beta_2[c], tau_log_beta_2[c])
beta_g_2[c]      = exp(log_beta_g_2[c])

eta_g_3[c]       ~ dnorm(mu_eta_3[c],tau_eta_3[c])
log_beta_g_3[c]  ~ dnorm(mu_log_beta_3[c], tau_log_beta_3[c])
beta_g_3[c]      = exp(log_beta_g_3[c])

for (i in 1:nSubjects){
    log_beta_i_1[i,c]  ~ dnorm(mu_log_beta_1[i,c], tau_log_beta_1[i,c])
    beta_i_1[i,c]      = exp(log_beta_i_1[i,c])
    eta_i_1[i,c]       ~ dnorm(mu_eta_1[i,c],tau_eta_1[i,c])

    log_beta_i_2[i,c]  ~ dnorm(mu_log_beta_2[c], tau_log_beta_2[c])
    beta_i_2[i,c]      = exp(log_beta_i_2[i,c])
    eta_i_2[i,c]       ~ dnorm(mu_eta_2[c],tau_eta_2[c])

    log_beta_i_3[i,c]  ~ dnorm(0, 1) #not used
    beta_i_3[i,c]      = exp(0)      #not used
    eta_i_3[i,c]       ~ dnorm(0,1)  #not used
}#end of subjects
}#end of conditions


##HYPERPRIORS
for (c in 1:nConditions){
    for (i in 1:nSubjects){
        ##no pooling
        #beta parameter
        mu_log_beta_1[i,c]       ~ dunif(muLogBetaL,muLogBetaH)
        tau_log_beta_1[i,c]      = pow(sigma_log_beta_1[i,c],-2)
        sigma_log_beta_1[i,c]    ~ dunif(sigmaL,sigmaH)

        #eta parameter
        mu_eta_1[i,c]            ~ dunif(muEtaL,muEtaH)
        tau_eta_1[i,c]           = pow(sigma_eta_1[i,c],-2)
        sigma_eta_1[i,c]         ~ dunif(sigmaL,sigmaH)
    }

    ##partial pooling
    #beta parameter
    mu_log_beta_2[c]       ~ dunif(muLogBetaL,muLogBetaH)
    tau_log_beta_2[c]      = pow(sigma_log_beta_2[c],-2)
    sigma_log_beta_2[c]    ~ dunif(sigmaL,sigmaH)

    #eta parameter
    mu_eta_2[c]            ~ dunif(muEtaL,muEtaH)
    tau_eta_2[c]           = pow(sigma_eta_2[c],-2)
    sigma_eta_2[c]         ~ dunif(sigmaL,sigmaH)

    ##Full pooling
    #beta parameter
    mu_log_beta_3[c]       ~ dunif(muLogBetaL,muLogBetaH)
    tau_log_beta_3[c]      = pow(sigma_log_beta_3[c],-2)
    sigma_log_beta_3[c]    ~ dunif(sigmaL,sigmaH)

    #eta parameter
    mu_eta_3[c]            ~ dunif(muEtaL,muEtaH)
    tau_eta_3[c]           = pow(sigma_eta_3[c],-2)
    sigma_eta_3[c]         ~ dunif(sigmaL,sigmaH)
}#end of conditions

}