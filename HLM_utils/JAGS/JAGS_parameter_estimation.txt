# Fit condition specific params for isoelastic model for each subject

model{

##LIKELIHOOD
for (i in 1:nSubjects){
for (c in 1:nConditions){
for (t in 1:nTrials){
    u_dyn[i,c,t] = ( pow(w[i,c,t] , ( 1 - lambd[c] ) ) -1 ) / ( 1- lambd[c] )

    u_dyn1[i,c,t] = u_dyn[i,c,t] + g1[i,c,t]
    u_dyn2[i,c,t] = u_dyn[i,c,t] + g2[i,c,t]
    u_dyn3[i,c,t] = u_dyn[i,c,t] + g3[i,c,t]
    u_dyn4[i,c,t] = u_dyn[i,c,t] + g4[i,c,t]

    w1[i,c,t] = pow( (1-lambd[c]) * u_dyn1[i,c,t] + 1, 1 / (1-lambd[c]))
    w2[i,c,t] = pow( (1-lambd[c]) * u_dyn2[i,c,t] + 1, 1 / (1-lambd[c]))
    w3[i,c,t] = pow( (1-lambd[c]) * u_dyn3[i,c,t] + 1, 1 / (1-lambd[c]))
    w4[i,c,t] = pow( (1-lambd[c]) * u_dyn4[i,c,t] + 1, 1 / (1-lambd[c]))

    u1[i,c,t]      =  ( pow(w1[i,c,t] , ( 1 - eta[i,c] ) ) -1 ) / ( 1- eta[i,c] )  #transforms wealth into utility
    u2[i,c,t]      =  ( pow(w2[i,c,t] , ( 1 - eta[i,c] ) ) -1 ) / ( 1- eta[i,c] )  #transforms wealth into utility
    u3[i,c,t]      =  ( pow(w3[i,c,t] , ( 1 - eta[i,c] ) ) -1 ) / ( 1- eta[i,c] )  #transforms wealth into utility
    u4[i,c,t]      =  ( pow(w4[i,c,t] , ( 1 - eta[i,c] ) ) -1 ) / ( 1- eta[i,c] )  #transforms wealth into utility

    edug1[i,c,t]  = ( u1[i,c,t] + u2[i,c,t] ) / 2  #computes expected change in utiluty for each gamble
    edug2[i,c,t]  = ( u3[i,c,t] + u4[i,c,t] ) / 2

    deu[i,c,t]    = edug1[i,c,t] - edug2[i,c,t]                   #computes difference in expected change in utility
    sdeu[i,c,t]   = -1 * beta[i,c] * deu[i,c,t]                   #scaled by sensitivity parameter
    tmp[i,c,t]    = ( 1 ) / ( 1 + (exp(sdeu[i,c,t]) ) )           #choice probability
    theta[i,c,t]  = max( 0.000001 , min(0.999999 , tmp[i,c,t]) )  #ensure 0 < cp < 1
    y[i,c,t]      ~ dbern(theta[i,c,t])                           #computes bernoulli distributed choice

}# end of trials

}# end of conditions
}# end of subjects


## PRIORS
#nt = nTrials[i,c]
for (i in 1:nSubjects){
    for (c in 1:nConditions){
        log_beta[i,c]  ~ dnorm(mu_log_beta[c], tau_log_beta[c])  # log beta_lin sampled from normal hyperprior
        beta[i,c]      = exp(log_beta[i,c])                      # transforms from logspace, now lognormally distributed prior
        eta[i,c]       ~ dnorm(mu_eta[c],tau_eta[c])             # eta
    }#end of conditions
}#end of subjects


##HYPERPRIORS
for (c in 1:nConditions){
        #beta parameter
        mu_log_beta[c]       ~ dunif(muLogBetaL,muLogBetaU)         #mean of log beta
        tau_log_beta[c]      = pow(sigma_log_beta[c],-2)            #precision on log beta
        sigma_log_beta[c]    ~ dunif(sigmaLogBetaL,sigmaLogBetaU)   #std on log beta

        #eta parameter
        mu_eta[c]                ~ dunif(muEtaL,muEtaU)       #mean of eta
        tau_eta[c]               = pow(sigma_eta[c],-2)       #precision of eta
        sigma_eta[c]             ~ dunif(sigmaEtaL,sigmaEtaU) #std on eta
}#end of conditions

#dynamic parameters
lambd[1] = 0
lambd[2] = 0.99
}